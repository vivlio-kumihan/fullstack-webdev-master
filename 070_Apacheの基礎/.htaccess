# DirectoryIndex file1.html
# Options -Indexes


# Redirect /apache/redirect-test  /apache
# Redirect /apache/redirect-test  https://apple.com

# # pathの変更があった場合に即時に反映される。
# Redirect 302 /apache/file1 /apache/dir-test/file2.html

# ブラウザのキャッシュに保存されるので変更が効かなくなる。
# 変更できるようにするには、開発ツールのNetworkで該当箇所を右クリックからメニューを出して
# 『Clear browser cache』を選択してブラウザのキャッシュを消去する必要がある。
# Redirect 301 /apache/file1 /apache/dir-test/file2.html


# まずは、リライトをスタートの宣言
# RewriteEngine On

# この『.htaccess』は、エイリアスが『/apache』に設定してあるので、
# パスの先頭に『/apache』をつける必要はない。
# 『.htaccess』からの相対ぱすでファイルを指定することになっている。
# リンクの置き換えのファイル指定は、パスの先頭に『/apache』をつける必要がある。要注意！
# URLは指示したものが使われる。
# つまり、URLはブラウザには伝えられず、サーバー側で擬似的に切り替えの処理を行うから。
# これを『インターナル・リダイレクト』という。
# ここが REDIRECTとは違うところ。
# RewriteRule rewrite-test/index.html /apache/rewrite-test/tmp.html [R]
# RewriteRule rewrite-test/index.html /apache/rewrite-test/tmp.html

# RewriteBase /apache/rewrite-test/

# ディレクトリ名だけを一致させて、
# 違うディレクトリからファイルを出力させたい場合、
# 後方参照を使う。
# この場合、htmlの拡張子がついているファイルにマッチしたものをグループ化。
# RewriteRule rewrite-test/sub1/(.+\.html) sub2/$1
# RewriteRule rewrite-test/imgs/(\d{3}).jpg imgs/$1.png


# RewriteCond %{HTTP_HOST} ^localhost
# RewriteRule rewrite-test/imgs/(\d{3}).jpg imgs/$1.png

# 条件%{HTTP_HOST}がlocalhost、これが真の場合に、
# http://localhost:8888/apache/rewrite-test/imgs/150.jpg
# このpathのjpg画像をpngへのURLに書き換える。

# これに対して
# http://127.0.0.1:8888/apache/rewrite-test/imgs/150.jpg
# localhostではなく、ループ・バック・アドレス（127.0.0.1）で呼ぶと、
# 条件に一致しないので、書き換えをせずpath通りで表示させる。


# RewriteCond %{HTTP_HOST} ^localhost
# RewriteRule .? - [F]

# 条件%{HTTP_HOST}がlocalhost、これが真の場合に、
# 『.?』
#     一文字があってもなくても、
# 『- [F]』
#     ページのリソースにアクセスする権限がないので
#     ページの閲覧を『禁止』する。


# クエリのパラメータで条件が渡ってきた時、
# クエリパラメータの書き方。
# ?p=file1.html
# 『p』に値が格納されるので、
# 正規表現の条件式で拾ってやる。なんか左右が逆に感じる。


# DirectoryIndex file1.html
# RewriteEngine On
# RewriteBase /apache/rewrite-test/
# # クエリのパラメータでファイル名が渡ってきた時に、そのファイルを出力する条件を書く。
# # クエリのパラメータで渡ってきたファイル名は『%{QUERY_STRING}』に格納される。
# # それを、ブラウザの検索窓で『URL』+『?』の次に書いた
# # 『p』という名前で渡ってきた『(.+)』の正規表現で括れる値を取り出してやる。
# RewriteCond %{QUERY_STRING} p=(.+)
# # 取り出したパラメータ『(.+)』を後方参照で使用する。
# # なお、『?』をつけないと無限に『%1』にマッチしようとしてURLのファイル名がおかしくなる。
# # そして、『[R]』オプションをつけるとブラウザの検索窓にマッチした結果が出てくるのでバグ探しのネタになる。
# RewriteRule rewrite-test/sub1 sub1/%1? [R]

# # 検索窓でのクエリについて複数の検索ができる。
# # 例えば、
# # http://localhost:8888/apache/rewrite-test/sub1/?p=file.html&?p=index.html
# RewriteCond %{QUERY_STRING} p=(.+)&?
# RewriteRule rewrite-test/sub1 sub1/%1?

# # ファイルが存在するかを『真』『偽』で返す。
# # 存在する場合にリダイレクトを実行しろと宣言。
# # RewriteCond %{REQUEST_FILENAME} -f
# # 存在しない場合にリダイレクトを実行しろと宣言。
# RewriteCond %{REQUEST_FILENAME} !-f
# # sub2ディレクトリの中に、ファイル名で指定したファイルがない場合、
# # sub1ディレクトリの中のファイル名で指定したファイルを探して表示しなさい。という命令。
# RewriteRule rewrite-test/sub2/(.+) sub1/$1

# RewriteCond %{REQUEST_FILENAME} !-d
# # sub2ディレクトリの中に、指定したディレクトリがない場合、
# # sub1ディレクトリの中のディレクトリを探し、index.htmlを表示させる。
# RewriteRule rewrite-test/sub2/(.+) sub1/$1

# # スタックさせると『&&』となる。よく使うらしい。
# RewriteCond %{REQUEST_FILENAME} !-d
# RewriteCond %{REQUEST_FILENAME} !-f
# # sub2ディレクトリの中に、指定したディレクトリがない場合、
# # sub1ディレクトリの中のディレクトリを探し、index.htmlを表示させる。
# RewriteRule rewrite-test/sub2/(.+) sub1/$1



# 理解度チェック
# 問１：
# .htmlで来たリクエストを同じファイル名のphpに転送してください。
# つまり、検索窓に直接URLで書かれたファイル名ということ === RewriteRuleで書く。
# 
# 例）
# http://localhost:8888/apache/rewrite-test/file1.html
# -> http://localhost:8888/apache/rewrite-test/file1.php



# RewriteEngine On
# DirectoryIndex file1.html
# RewriteBase /apache/rewrite-test/

# # 先頭の『/?』をなぜつけるのか？
# # .htaccessなら不必要。httpd.confでは必要。
# # 書き分けるのが邪魔くさいので付けておくとのこと。
# RewriteRule /?rewrite-test/(.+)\.html$ $1.php

# # 問２：
# # rewrite-test/sub1内のファイルに対してリクエストを送信
# # した際に同じファイル名でsub2内に存在するファイルは
# # sub2のものを表示してください。存在しなければ、sub1内の
# # ファイルを表示してください。
# # 例）
# # http://localhost:8888/apache/rewrite-test/sub1/file1.html
# # -> http://localhost:8888/apache/rewrite-test/sub2/file1.html
# # 
# # http://localhost:8888/apache/rewrite-test/sub1/file2.html
# # -> Internal Redirect は行わない。

# # !!! 注意点 !!!
# # 入力値に対して、{REQUEST_FILENAME}は使えない。
# # 探すのは『sub1』ディレクトリだが、転送先は『sub2』だから。
# # /Applications/MAMP/htdocs/fullstack-webdev-master/070_Apacheの基礎/rewrite-test/sub2/
# # の中に検索結果で返ってきたグループ『$1』があれば。。。という条件を書く必要がある。
# RewriteEngine On
# RewriteBase /apache/rewrite-test/
# RewriteCond /Applications/MAMP/htdocs/fullstack-webdev-master/070_Apacheの基礎/rewrite-test/sub2/$1 -f

# # !!! ここの注目 !!!
# # 『sub1』ディレクトリの中に何かがあれば、とりあえずまとめて『S1』に送りRewriteCondで吟味して『真』が返ったら『sub2/$1』で転送する。
# # 配列のforを見えない状態でやっているわけだ。
# RewriteRule /?rewrite-test/sub1/(.*) sub2/$1

# # ファイルとディレクトリで検索をやる。
# # ファイルがあるかとディレクトリがあるかを『&& 論理積』の条件付はできないので『|| 論理和』でやる。
RewriteEngine On
RewriteBase /apache/rewrite-test/
RewriteCond /Applications/MAMP/htdocs/fullstack-webdev-master/070_Apacheの基礎/rewrite-test/sub2/$1 -f [OR]
RewriteCond /Applications/MAMP/htdocs/fullstack-webdev-master/070_Apacheの基礎/rewrite-test/sub2/$1 -d
RewriteRule /?rewrite-test/sub1/(.*) sub2/$1

